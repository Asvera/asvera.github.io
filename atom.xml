<?xml version="1.0" encoding="UTF-8"?>
<feed xmlns="http://www.w3.org/2005/Atom" xml:lang="en">
    <title>Asvera</title>
    <subtitle>My Protfolio Website</subtitle>
    <link href="https://asvera.github.io/atom.xml" rel="self" type="application/atom+xml"/>
    <link href="https://asvera.github.io/"/>
    <generator uri="https://www.getzola.org/">Zola</generator>
    <updated>2024-01-25T00:00:00+00:00</updated>
    <id>https://asvera.github.io/atom.xml</id>
    <entry xml:lang="en">
        <title>Understanding Unicode and UTF-8</title>
        <published>2024-01-25T00:00:00+00:00</published>
        <updated>2024-01-25T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://asvera.github.io/blog/understandingutf8/" type="text/html"/>
        <id>https://asvera.github.io/blog/understandingutf8/</id>
        
        <content type="html">&lt;p&gt;Unicode maps 32-bit (4 byte) integers, also called code points or runes, to characters. UTF-8 is a way of storing those code points using less than 4 bytes per character.&lt;&#x2F;p&gt;
&lt;p&gt;61 is the Unicode code point for a, 229 is å and 5793 is ᚡ. Unicode is how most modern programming languages represent strings: Java, .Net (C#, VB.Net), Go, and Python3, for example. Code points are usually written as two hexadecimal bytes prefixed by the letter u, or four prefixed by U. &lt;&#x2F;p&gt;
&lt;p&gt;In python 3 this will display ᚡ:
&lt;code&gt;print(&#x27;\u16a1&#x27;)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;The first byte of that 32-bit integer (the code point) covers most characters used by European languages. The first 127 code points (hex values 00 to 7f) are the same as&lt;&#x2F;p&gt;
&lt;p&gt;ASCII: 61 is both Unicode and ASCII code for a. The next 128 code points (0x80-0xff) are the same as ISO-8859-1, also called latin-1: e5 (229) is both Unicode and ISO-8859-1 for å.&lt;&#x2F;p&gt;
&lt;p&gt;The first two bytes cover characters for almost all modern languages. It is extremely rare to need the full 4 bytes as they are mostly empty. A rare exception, sad kitty U0001F640 needs three bytes. It broke WordPress when I put it in this post – that’s how common characters above two bytes are!&lt;&#x2F;p&gt;
&lt;p&gt;An encoding is a mapping from bytes to Unicode code points. If you use the code points directly as their mapping (4 bytes per code point) you have UTF-32. So 00 00 00 61 is UTF-32 for Unicode code point 61, which is a.&lt;&#x2F;p&gt;
&lt;p&gt;English speakers will usually only need one byte, and other language users two, so there are more efficient encodings. The most common Unicode encoding is UTF-8.&lt;&#x2F;p&gt;
&lt;p&gt;The first 127 values of UTF-8 map directly to Unicode code points, and hence to ASCII codes. 61 is UTF-8 for Unicode code point 61, which is character a. If you only ever use values up to 127, UTF-8, Unicode code points, and ASCII are the same. This makes confusion easy.&lt;&#x2F;p&gt;
&lt;p&gt;Above 127, UTF-8 uses between two and four bytes for each code point. c3 a5 is UTF-8 for Unicode code point u00e5, which is å. &lt;&#x2F;p&gt;
&lt;p&gt;In python3:
&lt;code&gt;bytes([0xc3, 0xa5]).decode(&amp;quot;utf8&amp;quot;)&lt;&#x2F;code&gt;&lt;&#x2F;p&gt;
&lt;p&gt;This means UTF-8 is not compatible with ISO-8859-1.&lt;&#x2F;p&gt;
&lt;p&gt;When you receive a string of bytes, you also need to know it’s encoding to interpret it as Unicode. Luckily is is quite easy to test for valid UTF-8. In Go you use the Valid function of unicode&#x2F;utf8. In Python you try to .decode(&amp;quot;utf8&amp;quot;) and catch the UnicodeDecodeError.&lt;&#x2F;p&gt;
&lt;p&gt;In summary (all values are hex):&lt;&#x2F;p&gt;
&lt;table&gt;&lt;thead&gt;&lt;tr&gt;&lt;th&gt;UTF-8&lt;&#x2F;th&gt;&lt;th&gt;UTF-32&lt;&#x2F;th&gt;&lt;th&gt;Unicode code point&lt;&#x2F;th&gt;&lt;th&gt;ASCII&lt;&#x2F;th&gt;&lt;th&gt;ISO-8859-1&lt;&#x2F;th&gt;&lt;th&gt;Character&lt;&#x2F;th&gt;&lt;&#x2F;tr&gt;&lt;&#x2F;thead&gt;&lt;tbody&gt;
&lt;tr&gt;&lt;td&gt;61&lt;&#x2F;td&gt;&lt;td&gt;00 00 00 61&lt;&#x2F;td&gt;&lt;td&gt;61(decimal 97)&lt;&#x2F;td&gt;&lt;td&gt;61&lt;&#x2F;td&gt;&lt;td&gt;61&lt;&#x2F;td&gt;&lt;td&gt;a&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;c3 a5&lt;&#x2F;td&gt;&lt;td&gt;00 00 00 e5&lt;&#x2F;td&gt;&lt;td&gt;e5(decimal 229)&lt;&#x2F;td&gt;&lt;td&gt;None&lt;&#x2F;td&gt;&lt;td&gt;e5&lt;&#x2F;td&gt;&lt;td&gt;å&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;tr&gt;&lt;td&gt;e1 9a a1&lt;&#x2F;td&gt;&lt;td&gt;00 00 16 a1&lt;&#x2F;td&gt;&lt;td&gt;16a1(decimal 5793)&lt;&#x2F;td&gt;&lt;td&gt;None&lt;&#x2F;td&gt;&lt;td&gt;None&lt;&#x2F;td&gt;&lt;td&gt;ᚡ&lt;&#x2F;td&gt;&lt;&#x2F;tr&gt;
&lt;&#x2F;tbody&gt;&lt;&#x2F;table&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>JavaScript frameworks from the last decade didn&#x27;t grow well</title>
        <published>2024-01-22T00:00:00+00:00</published>
        <updated>2024-01-22T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://asvera.github.io/blog/jsformlastdecade/" type="text/html"/>
        <id>https://asvera.github.io/blog/jsformlastdecade/</id>
        
        <content type="html">&lt;p&gt;To anyone who has written a software application from scratch and has supported it for a few years, it shouldn’t be a surprise that the maintenance of that software comes at a cost. This cost needs to be considered when making a decision to implement a particular solution.&lt;&#x2F;p&gt;
&lt;p&gt;By maintenance, I’m not talking about adding new features. I’m talking about the chores you have to do if you don’t want to eventually be faced with the decision to either leave it as is or kill it.&lt;&#x2F;p&gt;
&lt;p&gt;Let’s illustrate this with an example.&lt;&#x2F;p&gt;
&lt;p&gt;Suppose it’s late 2010, and you need to build an interactive web UI. Rather than reinvent the wheel (remember, you’re being paid to make a dashboard for the business, not to invent wheels), you come across a library called Backbone.js. Halejiojah! You don’t have to spend late nights at the office trying to figure out how to keep the UI in sync with the data. You npm install it (just kidding, npm was only a year old at the time), or more likely you just download some files from a website.&lt;&#x2F;p&gt;
&lt;p&gt;Fast forward a couple years, and some new frameworks start popping up and gaining popularity. Because they are supported by big companies who have the resources to pay people to work on this stuff all day, those frameworks become pretty good.&lt;&#x2F;p&gt;
&lt;p&gt;Five years later, even routine maintenance couldn’t save your dashboard UI written in Backbone.js. At some point, you struggle to find libraries to help you validate forms or convert currency. At the worst, the maintainer of Backbone.js may have moved on to other pursuits, meaning all the existing bugs are more or less yours to fix, or ignore.&lt;&#x2F;p&gt;
&lt;p&gt;Now your colleagues are making dashboards for the business twice as fast as you are. They’re using React and have thousands of libraries at their disposal, which of course have their own maintenance cost.&lt;&#x2F;p&gt;
&lt;p&gt;You’re faced with two choices. You can either accept that your work will take twice as long because you have to do a lot of things by hand (which will make your manager suspicious because your colleagues over there are making dashboards twice as fast!), or you can kill your Backbone.js application for good and rewrite it in a new framework.&lt;&#x2F;p&gt;
&lt;p&gt;In 2020, the situation is a lot better for JavaScript frameworks. Angular provides concrete update guides to help you update your application to the latest version. These little tools make maintenance a breeze. You can select what version you currently have and which version you wish to upgrade to, and a checklist is generated to guide you. The React team has a commitment to limit breaking changes (but not before they raced through sixteen of them!).&lt;&#x2F;p&gt;
&lt;p&gt;Nevertheless, you can’t assume that once you rewrite your application in Angular, everything’s going to be fine. They release updates a few times per year, so that has to be taken into account when estimating the effort it will take to maintain the application. Because if you let it fall behind, it will end up just like your Backbone.js app.&lt;&#x2F;p&gt;
&lt;p&gt;If you install a library for everything, be prepared that the library maintainers may have retired the next time Angular releases a new major version. They’re on a beach in Hawaii, and you’re in the office pulling your hair out because the drag’n’drop file upload library doesn’t support the new version of Angular. But time’s passing quick. You don’t want to let your Angular app fall behind to the point where the relevant documentation is hard to find on the website because the version you’re using is so old. This is where software maintenance gets tricky. You have to decide what path will offer the best results for the least effort. You could make a pull request to the library, or you could convince the business that they don’t need to drag’n’drop their files. This is where engineering becomes fun because it’s not all just about writing code. Sometimes the solution may not involve code at all, but rather a conversation.&lt;&#x2F;p&gt;
&lt;p&gt;Some say that the hardest part of doing anything is getting started. Running create-react-app on day one will give you the feeling of making a lot of progress. But if you’re not careful about your decisions, you’ll find that the maintenance of your software will remind you about your bad decisions many times over. But if you’re wise, you’ll see these reminders as the best teachers.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>Off to a good start</title>
        <published>2023-11-08T00:00:00+00:00</published>
        <updated>2023-11-08T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://asvera.github.io/blog/offtogoodstart/" type="text/html"/>
        <id>https://asvera.github.io/blog/offtogoodstart/</id>
        
        <content type="html">&lt;p&gt;The hardest part of starting a blog was choosing a good theme. After going through various themes that I created myself and visiting various people&#x27;s blog sites for inspiration, it took almost 4-5 months to finally complete a theme for my site that I tailored it myself, facing many hardships and spending days tweaking HTML and CSS.&lt;&#x2F;p&gt;
&lt;p&gt;You might laugh that I sound like a noob, but I&#x27;m not. Well, it kind of does sound like I am, but I have my reasons:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;Semester exams&lt;&#x2F;li&gt;
&lt;li&gt;College life depressions&lt;&#x2F;li&gt;
&lt;li&gt;Laziness&lt;&#x2F;li&gt;
&lt;li&gt;Spending time with friends, just chatting&lt;&#x2F;li&gt;
&lt;li&gt;College attendance&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;Out of the reasons I listed, &lt;em&gt;college attendance&lt;&#x2F;em&gt; is the most important one. For some weird reason, my college has a 75% attendance criteria for each course of the semester, forcing students to comply with the rule. Anyone who doesn&#x27;t comply gets detained from taking the semester exams, resulting in failing the courses and accumulating backlogs. If you accumulate more than 7-8 backlogs, you have to repeat the year. There can be debates over this topic; I often hear my friends cursing this system, and one of them wasn&#x27;t allowed to appear for an examination.&lt;&#x2F;p&gt;
&lt;p&gt;Anyway, I decided to use this simple yet elegant-looking theme.&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>My Projects</title>
        <published>2022-11-27T00:00:00+00:00</published>
        <updated>2022-11-27T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://asvera.github.io/projects/" type="text/html"/>
        <id>https://asvera.github.io/projects/</id>
        
        <content type="html">&lt;p&gt;This is my Project Page.&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Asvera&#x2F;residentweb&quot;&gt;&lt;strong&gt;Real Estate Website&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - Build utilises the ReactJs, Vanilla CSS, an**d variouse npm pakages such as framer motion, swiper, etc.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Asvera&#x2F;studentDB_flask&quot;&gt;&lt;strong&gt;StudenDB&lt;&#x2F;strong&gt;&lt;&#x2F;a&gt; - Simple app in &lt;em&gt;FLASK Micro framework&lt;&#x2F;em&gt; to Perform CRUD operations on sqlite database.&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Others&lt;&#x2F;strong&gt; - Other Vanilla JS projects such as &lt;strong&gt;calculator, weather app, etc&lt;&#x2F;strong&gt; is on my &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;Asvera&quot;&gt;Github&lt;&#x2F;a&gt; acccount.&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;p&gt;If want see all my project &amp;amp; code visit my Github Page&lt;&#x2F;p&gt;
</content>
        
    </entry>
    <entry xml:lang="en">
        <title>About Me</title>
        <published>2022-05-14T00:00:00+00:00</published>
        <updated>2022-05-14T00:00:00+00:00</updated>
        <author>
          <name>Unknown</name>
        </author>
        <link rel="alternate" href="https://asvera.github.io/about/" type="text/html"/>
        <id>https://asvera.github.io/about/</id>
        
        <content type="html">&lt;p&gt;Hello! I&#x27;m asvera, a dedicated software developer. I specialize in web development, particularly in JavaScript and React, and I&#x27;m always looking for new challenges to tackle.&lt;&#x2F;p&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;my-skills&quot;&gt;My Skills&lt;&#x2F;h2&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Programming Languages:&lt;&#x2F;strong&gt; C&#x2F;C++, JavaScript, Python&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Technologies:&lt;&#x2F;strong&gt; Sqlite3, MangoDB&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Frameworks and Libraries:&lt;&#x2F;strong&gt; React, Flask, ExpressJS&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Tools and Technologies:&lt;&#x2F;strong&gt; Git&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;Other:&lt;&#x2F;strong&gt; Markdown&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;!-- - **Soft Skills:** Problem-solving, Teamwork, Communication --&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;contact-me&quot;&gt;Contact Me&lt;&#x2F;h2&gt;
&lt;p&gt;If you&#x27;re interested in collaborating or just want to chat, feel free to reach out:&lt;&#x2F;p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;strong&gt;Email:&lt;&#x2F;strong&gt; asverarise@gmail.com&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;LinkedIn:&lt;&#x2F;strong&gt; &lt;a href=&quot;http:&#x2F;&#x2F;www.linkedin.com&#x2F;in&#x2F;shubham-yadav-80976a267&quot;&gt;Asvera on LinkedIn&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;li&gt;&lt;strong&gt;GitHub:&lt;&#x2F;strong&gt; &lt;a href=&quot;https:&#x2F;&#x2F;github.com&#x2F;asvera&quot;&gt;Asvera on GitHub&lt;&#x2F;a&gt;&lt;&#x2F;li&gt;
&lt;&#x2F;ul&gt;
&lt;hr &#x2F;&gt;
&lt;h2 id=&quot;cv-resume&quot;&gt;CV&#x2F;Resume&lt;&#x2F;h2&gt;
&lt;p&gt;&lt;a href=&quot;&#x2F;&quot;&gt;My CV&#x2F;Resume&lt;&#x2F;a&gt;&lt;&#x2F;p&gt;
&lt;p&gt;Thank you for taking the time to learn a bit about me!&lt;&#x2F;p&gt;
</content>
        
    </entry>
</feed>
